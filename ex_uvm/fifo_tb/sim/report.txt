Model Technology ModelSim SE-64 vcover 10.7d Coverage Utility 2019.02 Feb 15 2019
Start time: 11:23:37 on Feb 24,2022
vcover report -details vsim.ucdb 
Coverage Report by file with details

=================================================================================
=== File: ../fifo_tb_pkg/agent.svh
=================================================================================
Statement Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Stmts                           11         8         3     72.72

================================Statement Details================================

Statement Coverage for file ../fifo_tb_pkg/agent.svh --

    1                                                // ----------------------------------------------------------------------------
    2                                                // agent.svh
    3                                                // ----------------------------------------------------------------------------
    4                                                // UVM agent class
    5                                                // ----------------------------------------------------------------------------
    6                                                
    7                                                class agent extends uvm_agent;
    8               1                    ***0***        `uvm_component_utils(agent)
    8               2                    ***0***     
    8               3                    ***0***     
    9                                                
    10                                                  uvm_analysis_port #(transaction) ap;
    11                                                  
    12                                                  // component handles
    13                                                  sequencer seqr_h;
    14                                                  driver    drv_h;
    15                                                  monitor   mntr_h;
    16                                                  
    17                                               
    18                                                  function new(string name, uvm_component parent);
    19              1                          1           super.new(name, parent);
    20                                                  endfunction: new
    21                                               
    22                                                  function void build_phase(uvm_phase phase);
    23                                                     
    24                                                     // Create an instance of the analysis port
    25              1                          1           ap = new ("ap", this);
    26                                               
    27                                                     // create components
    28              1                          1           seqr_h = sequencer::type_id::create("seqr_h", this);
    29              1                          1           drv_h  =    driver::type_id::create("drv_h", this);
    30              1                          1           mntr_h = monitor::type_id::create("mntr_h", this);
    31                                                     
    32                                                  
    33                                                     // debug prints
    34              1                          1           `uvm_info("agent","Created agent",UVM_HIGH)
    35                                               
    36                                                  endfunction: build_phase
    37                                               
    38                                                  function void connect_phase(uvm_phase phase);
    39                                               
    40                                                     // connect driver's port (input) to the sequencer's export (output)
    41              1                          1           drv_h.seq_item_port.connect(seqr_h.seq_item_export);
    42                                               
    43                                                     // connect monitor's analysis port
    44              1                          1           mntr_h.ap.connect(ap);
    45                                                     
    46                                               
    47                                                  endfunction: connect_phase
    48                                               
    49                                               endclass: agent


=================================================================================
=== File: ../fifo_tb_pkg/coverage.svh
=================================================================================
Statement Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Stmts                            9         5         4     55.55

================================Statement Details================================

Statement Coverage for file ../fifo_tb_pkg/coverage.svh --

    1                                                class coverage extends uvm_subscriber #(transaction);
    2                                                
    3                                                   // Registeration macro
    4               1                    ***0***        `uvm_component_utils (coverage)
    4               2                    ***0***     
    4               3                    ***0***     
    5                                                
    6                                                   // Add transaction variable
    7                                                   transaction sample_tx;
    8                                                
    9                                                   // Functionality
    10                                                  covergroup cg_bus;
    11                                                     c_data_to_DUT : coverpoint sample_tx.data_to_DUT;
    12                                                     c_data_from_DUT : coverpoint sample_tx.data_from_DUT;
    13                                                     c_data_empty : coverpoint sample_tx.empty;
    14                                                     c_data_full : coverpoint sample_tx.full;
    15                                                  endgroup // cg_bus
    16                                               
    17                                                  // Covergroup constructor
    18              1                          1        cg_bus = new();
    19                                               
    20                                                  // Constructor
    21                                                  function new (string name = "coverage", uvm_component parent = null);
    22              1                          1           super.new (name, parent);
    23                                                  endfunction // new
    24                                               
    25                                                  // Build phase function with debug print
    26                                                  function void build_phase(uvm_phase phase);
    27              1                          1           `uvm_info("coverage", "Created Coverage Collector", UVM_HIGH)
    28                                                  endfunction: build_phase
    29                                               
    30                                                  // Interface through the transaction class
    31                                                  function void write(transaction t);
    32                                               
    33                                                     // Assign transaction (t) to sample_tx
    34              1                          3           sample_tx = t;
    35                                                     // Method to update the coverage information
    36              1                          3           cg_bus.sample();
    37                                               
    38                                                  endfunction: write
    39                                               
    40                                                  function real get_cg_coverage();
    41              1                    ***0***           return cg_bus.get_coverage();
    42                                                  endfunction: get_cg_coverage
    43                                                  
    44                                               endclass // coverage


=================================================================================
=== File: ../fifo_tb_pkg/driver.svh
=================================================================================
Statement Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Stmts                           15        11         4     73.33

================================Statement Details================================

Statement Coverage for file ../fifo_tb_pkg/driver.svh --

    1                                                // ----------------------------------------------------------------------------
    2                                                // driver.svh
    3                                                // ----------------------------------------------------------------------------
    4                                                // UVM driver class
    5                                                // ----------------------------------------------------------------------------
    6                                                
    7                                                class driver extends uvm_driver #(transaction);
    8                                                
    9               1                    ***0***         `uvm_component_utils(driver)
    9               2                    ***0***     
    9               3                    ***0***     
    10                                               
    11                                                   // declare a variable handle for the DUT interface and config object
    12                                                   virtual dut_if dut_vi;
    13                                                   dut_config dut_cfg;
    14                                               
    15                                                   function new(string name, uvm_component parent);
    16              1                          1             super.new(name, parent);
    17                                                   endfunction: new
    18                                               
    19                                                   function void build_phase(uvm_phase phase);
    20                                               
    21                                                       // get dut config from config db
    22                                                       if( !uvm_config_db #(dut_config)::get(this, "",
    23                                                                       "dut_configuration", dut_cfg) )
    24              1                    ***0***             `uvm_fatal("NOVIF", "No virtual interface set");
    25                                               
    26                                                       // connect the virtual interface handle
    27              1                          1             dut_vi = dut_cfg.dut_vi;
    28                                               
    29                                                       // debug prints
    30              1                          1             `uvm_info("driver", "Created driver", UVM_HIGH)
    31                                               
    32                                                   endfunction: build_phase
    33                                               
    34                                                   task run_phase (uvm_phase phase);
    35                                               
    36              1                          1             forever begin : pin_wiggle
    37                                               
    38                                                       // create a handle for transaction
    39                                                       // the transaction objects are created in the sequence
    40                                                       transaction tx;
    41                                               
    42                                                       // get a transaction object from the sequencer - blocking read
    43              1                          3             seq_item_port.get_next_item(tx);
    44                                               
    45                                                       // wait for clock edge
    46              1                          2             @(posedge dut_vi.clk);
    47                                               
    48                                                       // debug prints - verify transaction
    49              1                          2             `uvm_info("driver", "Transaction received, wiggling pins", UVM_HIGH)
    50                                               
    51                                                       // drive the individual DUT ports using the data from the transaction
    52              1                          2             dut_vi.data_to_DUT = tx.data_to_DUT;
    53              1                          2             dut_vi.we_out      = tx.write_enable;
    54              1                          2             dut_vi.re_out      = tx.read_enable;
    55                                               
    56                                                       // tell the sequencer that we are done
    57              1                          2             seq_item_port.item_done();
    58                                               
    59                                                       end : pin_wiggle
    60                                               
    61                                                   endtask: run_phase
    62                                               
    63                                               endclass: driver


=================================================================================
=== File: ../fifo_tb_pkg/dut_config.svh
=================================================================================
Statement Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Stmts                           11         1        10      9.09

================================Statement Details================================

Statement Coverage for file ../fifo_tb_pkg/dut_config.svh --

    1                                                // ----------------------------------------------------------------------------
    2                                                // dut_config.svh
    3                                                // ----------------------------------------------------------------------------
    4                                                // Configuration object for the DUT
    5                                                // Includes only an interface wrapper for the DUT interface
    6                                                // ----------------------------------------------------------------------------
    7                                                
    8                                                class dut_config extends uvm_object;
    9               1                    ***0***         `uvm_object_utils(dut_config)
    9               2                    ***0***     
    9               3                    ***0***     
    9               4                    ***0***     
    9               5                    ***0***     
    9               6                    ***0***     
    9               7                    ***0***     
    9               8                    ***0***     
    9               9                    ***0***     
    9              10                    ***0***     
    10                                               
    11                                                   virtual dut_if dut_vi; //_vi = virtual interface
    12                                               
    13                                                   // Add other configuration here, if needed
    14                                               
    15                                                   function new(string name = "");
    16              1                          1             super.new(name);
    17                                                   endfunction: new
    18                                               
    19                                               endclass: dut_config


=================================================================================
=== File: ../fifo_tb_pkg/env.svh
=================================================================================
Statement Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Stmts                            9         6         3     66.66

================================Statement Details================================

Statement Coverage for file ../fifo_tb_pkg/env.svh --

    1                                                // ----------------------------------------------------------------------------
    2                                                // env.svh
    3                                                // ----------------------------------------------------------------------------
    4                                                // UVM environment class
    5                                                // ----------------------------------------------------------------------------
    6                                                
    7                                                class env extends uvm_env;
    8               1                    ***0***         `uvm_component_utils(env)
    8               2                    ***0***     
    8               3                    ***0***     
    9                                                
    10                                                   // Component handles
    11                                                   agent agent_h;
    12                                                   coverage subscriber_h;
    13                                                  
    14                                               
    15                                                   function new(string name, uvm_component parent);
    16              1                          1             super.new(name,parent);
    17                                                   endfunction: new
    18                                               
    19                                                   function void build_phase(uvm_phase phase);
    20                                               
    21                                                       // create agent
    22              1                          1             agent_h = agent::type_id::create("agent_h",this);
    23                                               
    24                                                       // debug prints
    25              1                          1             `uvm_info("env","Created environment", UVM_HIGH)
    26                                               
    27                                                      // create subscriber
    28              1                          1            subscriber_h = coverage::type_id::create("subscriber_h",this);
    29                                                      
    30                                                      // debug prints
    31              1                          1            `uvm_info("env","Created subscriber", UVM_HIGH)
    32                                               
    33                                                   endfunction: build_phase
    34                                               
    35                                                  virtual function void connect_phase (uvm_phase phase);
    36                                                     // Connect the agent_h
    37              1                          1           agent_h.ap.connect(subscriber_h.analysis_export);
    38                                                     
    39                                                  endfunction // connect_phase
    40                                                  
    41                                                  
    42                                                   
    43                                               endclass: env


=================================================================================
=== File: ../fifo_tb_pkg/monitor.svh
=================================================================================
Statement Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Stmts                           16        12         4     75.00

================================Statement Details================================

Statement Coverage for file ../fifo_tb_pkg/monitor.svh --

    1                                                class monitor extends uvm_monitor;
    2               1                    ***0***        `uvm_component_utils (monitor)
    2               2                    ***0***     
    2               3                    ***0***     
    3                                                   
    4                                                   dut_config dut_cfg;
    5                                                   virtual dut_if dut_vi;
    6                                                
    7                                                   uvm_analysis_port #(transaction) ap;
    8                                                   
    9                                                
    10                                                  function new (string name = "monitor", uvm_component parent = null);
    11              1                          1           super.new (name, parent);
    12                                                  endfunction // new
    13                                               
    14                                                  // Actual interface object is later obtained by doing a get() 
    15                                                  // uvm_analysis_port #(transaction) mon_analysis_port;
    16                                               
    17                                                  // Build the UVM monitor
    18                                                  virtual function void build_phase (uvm_phase phase);
    19              1                          1           super.build_phase (phase);
    20                                               
    21                                                     // Create an instance of the analysis port
    22              1                          1           ap = new ("ap", this);
    23                                               
    24                                                     // Get virtual interface handle from the configuration DB
    25                                                     if ( !uvm_config_db #(dut_config)::get(this, "", "dut_configuration", dut_cfg)) begin
    26              1                    ***0***     	 `uvm_error (get_type_name (), "DUT interface not found")
    27                                                     end
    28                                                     else
    29              1                          1     	dut_vi = dut_cfg.dut_vi;
    30              1                          1     	`uvm_info("monitor", "Created monitor", UVM_HIGH)
    31                                                     
    32                                                     
    33                                                  endfunction // build_phase
    34                                               
    35                                                  // run_phase
    36                                                  virtual task run_phase (uvm_phase phase);
    37                                               
    38              1                          1           forever begin
    39                                               	 transaction tx;
    40              1                          4     	 @(posedge dut_vi.clk)
    41                                               
    42              1                          3     	   tx = transaction::type_id::create("tx");
    43              1                          3     	   tx.data_to_DUT = dut_vi.data_to_DUT;
    44                                               	 
    45              1                          3     	   `uvm_info("monitor", "Got data", UVM_HIGH)
    46                                               
    47              1                          3     	 ap.write(tx);
    48              1                          3     	 `uvm_info("monitor ap port", "writing", UVM_HIGH)
    49                                               
    50                                                     end 
    51                                               
    52                                                  endtask // run_phase
    53                                                  
    54                                               
    55                                               endclass // monitor
    56                                               
    57                                               
    58                                                  


=================================================================================
=== File: ../fifo_tb_pkg/sequence.svh
=================================================================================
Statement Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Stmts                           23        14         9     60.86

================================Statement Details================================

Statement Coverage for file ../fifo_tb_pkg/sequence.svh --

    1                                                // ----------------------------------------------------------------------------
    2                                                // sequence.svh
    3                                                // ----------------------------------------------------------------------------
    4                                                // UVM sequence class
    5                                                // Defines the transactions to be driven to the DUT
    6                                                // ----------------------------------------------------------------------------
    7                                                // Parameters (REQ,RSP) (request, response).
    8                                                // RSP = REQ if not specified otherwise
    9                                                // ----------------------------------------------------------------------------
    10                                               // Note that sequences and transactions are objects, not components.
    11                                               // - Different registration macro
    12                                               // - Must have a default name in the constructor, no parent
    13                                               // ----------------------------------------------------------------------------
    14                                               
    15                                               class basic_sequence extends uvm_sequence #(transaction);
    16              1                    ***0***         `uvm_object_utils(basic_sequence)
    16              2                    ***0***     
    16              3                    ***0***     
    16              4                    ***0***     
    16              5                    ***0***     
    16              6                          1     
    16              7                    ***0***     
    16              8                    ***0***     
    16              9                    ***0***     
    16             10                    ***0***     
    17                                               
    18                                                   function new(string name = "");
    19              1                          1             super.new(name);
    20                                                   endfunction: new
    21                                               
    22                                                   task body;
    23                                                       // handle for a transaction object
    24                                                       transaction tx;
    25                                               
    26                                                       // make a write to the DUT
    27              1                          1             tx = transaction::type_id::create("tx");
    28              1                          1             start_item(tx);
    29              1                          1             tx.data_to_DUT = 3;
    30              1                          1             tx.write_enable = 1;
    31              1                          1             tx.read_enable = 0;
    32              1                          1             finish_item(tx);
    33                                               
    34                                                       // make a read from DUT
    35              1                          1             tx = transaction::type_id::create("tx");
    36              1                          1             start_item(tx);
    37              1                          1             tx.data_to_DUT = 3;
    38              1                          1             tx.write_enable = 0;
    39              1                          1             tx.read_enable = 1;
    40              1                          1             finish_item(tx);
    41                                               
    42                                                   endtask: body
    43                                               
    44                                               endclass: basic_sequence


=================================================================================
=== File: ../fifo_tb_pkg/test_base.svh
=================================================================================
Statement Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Stmts                           13        10         3     76.92

================================Statement Details================================

Statement Coverage for file ../fifo_tb_pkg/test_base.svh --

    1                                                // ----------------------------------------------------------------------------
    2                                                // test_base.svh
    3                                                // ----------------------------------------------------------------------------
    4                                                // Instantiates the environment and runs a basic example sequence
    5                                                // ----------------------------------------------------------------------------
    6                                                
    7                                                class test_base extends uvm_test;
    8               1                    ***0***         `uvm_component_utils(test_base)
    8               2                    ***0***     
    8               3                          1     
    9                                                
    10                                                   // environment handle
    11                                                   env env_h;
    12                                                   basic_sequence seq_h;
    13                                               
    14                                                   // configuration wrapper for DUT interface
    15                                                   dut_config dut_cfg;
    16                                               
    17                                                   function new(string name, uvm_component parent);
    18              1                          1             super.new(name,parent);
    19                                                   endfunction: new
    20                                               
    21                                                   function void build_phase(uvm_phase phase);
    22                                               
    23                                                       // create environment
    24              1                          1             env_h = env::type_id::create("env_h", this);
    25                                               
    26                                                       // create DUT configuration wrapper - no need for factory here
    27              1                          1             dut_cfg = new();
    28                                               
    29                                                       // attach the virtual interface to dut configuration
    30                                                       if(!uvm_config_db #(virtual dut_if)::get( this, "",
    31                                                                                  "dut_vi", dut_cfg.dut_vi))
    32              1                    ***0***             `uvm_fatal("NOVIF", "No virtual interface set");
    33                                               
    34                                                       // share the dut configuration
    35              1                          1             uvm_config_db #(dut_config)::set(this, "*",
    36                                                                       "dut_configuration", dut_cfg);
    37                                               
    38                                                   endfunction: build_phase
    39                                               
    40                                                   task run_phase(uvm_phase phase);
    41                                               
    42                                                       // raise objection to notify that the testing isn't done yet
    43              1                          1             phase.raise_objection(this);
    44                                               
    45                                                       // create a sequence
    46              1                          1             seq_h = basic_sequence::type_id::create("seq_h");
    47                                               
    48                                                       // start the sequencer
    49              1                          1             seq_h.start( env_h.agent_h.seqr_h );
    50                                               
    51                                                       // wait 1 cycle before ending the simulation
    52              1                          1             #2;
    53                                               
    54                                                       // ready to stop
    55              1                          1             phase.drop_objection(this);
    56                                               
    57                                                   endtask: run_phase
    58                                               
    59                                               endclass: test_base


=================================================================================
=== File: ../fifo_tb_pkg/transaction.svh
=================================================================================
Statement Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Stmts                           14         2        12     14.28

================================Statement Details================================

Statement Coverage for file ../fifo_tb_pkg/transaction.svh --

    1                                                // ----------------------------------------------------------------------------
    2                                                // transaction.svh
    3                                                // ----------------------------------------------------------------------------
    4                                                // Transaction class
    5                                                // Responsible for containing a single packetful of transaction data
    6                                                // and the constraints for it
    7                                                // ----------------------------------------------------------------------------
    8                                                // Note: extending uvm_sequence_item, not its parent uvm_transaction
    9                                                // ----------------------------------------------------------------------------
    10                                               
    11                                               class transaction extends uvm_sequence_item;
    12              1                    ***0***         `uvm_object_utils(transaction)
    12              2                    ***0***     
    12              3                    ***0***     
    12              4                    ***0***     
    12              5                    ***0***     
    12              6                          2     
    12              7                    ***0***     
    12              8                    ***0***     
    12              9                    ***0***     
    12             10                    ***0***     
    13                                               
    14                                                   // transaction data here (i.e. DUT's data, write_enable etc..)
    15                                                   rand bit  [31:0]  data_to_DUT;
    16                                                   rand bit          write_enable;
    17                                                   rand bit          read_enable;
    18                                                   bit	              rst_n;
    19                                                   bit       [31:0]  data_from_DUT;
    20                                                   bit               full;
    21                                                   bit	              empty;
    22                                                   bit	              one_p;
    23                                                   bit	              one_d;
    24                                               
    25                                                   // add constraints for transaction data if required
    26                                                   // data constraint example:
    27                                                   // constraint c_data {data_to_DUT >= 0;}
    28                                               
    29                                                   function new(string name = "");
    30              1                          5             super.new(name);
    31                                                   endfunction: new
    32                                               
    33                                                   // Example of convert2string(): Modify to your liking
    34                                                   function string convert2string();
    35                                                       string s;
    36              1                    ***0***             $sformat(s, "%s\n", super.convert2string());
    37              1                    ***0***             $sformat(s, "%s DATA_TO:\t%8h\n DATA_FROM:\t%8h\n", s, data_to_DUT, data_from_DUT);
    38              1                    ***0***             return s;
    39                                                   endfunction:convert2string
    40                                               
    41                                               endclass: transaction


=================================================================================
=== File: ../fifo_tb_top.sv
=================================================================================
Statement Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Stmts                           11        11         0    100.00

================================Statement Details================================

Statement Coverage for file ../fifo_tb_top.sv --

    1                                                // ----------------------------------------------------------------------------
    2                                                // fifo_tb_top.sv
    3                                                // ----------------------------------------------------------------------------
    4                                                // Top level
    5                                                // - Connects the DUT
    6                                                // - Generates the clk
    7                                                // - Starts the test
    8                                                // ----------------------------------------------------------------------------
    9                                                
    10                                               `include "uvm_macros.svh"
    11                                               
    12                                               module fifo_tb_top;
    13                                                   import uvm_pkg::*;
    14                                                   import fifo_tb_pkg::*;
    15                                               
    16                                                   bit         clk;
    17                                                   dut_if      dut_interface (clk);  // Interface for DUT
    18                                               
    19                                                   initial begin : init
    20              1                          1             clk = 0;
    21              1                          1             dut_interface.rst_n = 0;
    22              1                          1             dut_interface.we_out = 0;
    23              1                          1             dut_interface.re_out = 0;
    24              1                          1             dut_interface.data_to_DUT = 0;
    25              1                          1             #2 dut_interface.rst_n = 1;
    25              2                          1     
    26                                                   end: init
    27                                               
    28                                                   initial begin : init_uvm
    29                                                       // share the dut interface via config db
    30              1                          1             uvm_config_db #(virtual dut_if)::set(null, "uvm_test_top",
    31                                                                                        "dut_vi", dut_interface);  
    32                                               
    33                                                       // start the test
    34              1                          1             run_test ("test_base");
    35                                               
    36                                                   end : init_uvm
    37                                               
    38                                                   // create clock, 2ns cycle
    39                                                   always begin : clock_generator
    40              1                          6             #1 clk =! clk;
    40              2                          5     
    41                                                   end : clock_generator
    42                                               
    43                                                   // instantiate the fifo and connect it to the interface
    44                                                   \fifo_tb_lib.fifo(behavioral) DUT (
    45                                                       .clk       (dut_interface.clk),
    46                                                       .rst_n     (dut_interface.rst_n),
    47                                                       .data_in   (dut_interface.data_to_DUT),
    48                                                       .we_in     (dut_interface.we_out),
    49                                                       .full_out  (dut_interface.full_in),
    50                                                       .one_p_out (dut_interface.one_p_in),
    51                                                       .re_in     (dut_interface.re_out),
    52                                                       .data_out  (dut_interface.data_from_DUT),
    53                                                       .empty_out (dut_interface.empty_in),
    54                                                       .one_d_out (dut_interface.one_d_in)
    55                                                   );
    56                                               
    57                                               endmodule: fifo_tb_top


COVERGROUP COVERAGE:
----------------------------------------------------------------------------------------------------------
Covergroup                                             Metric       Goal    Status               
                                                                                                         
----------------------------------------------------------------------------------------------------------
 TYPE /fifo_tb_pkg/coverage/cg_bus                     25.78%        100    Uncovered            
    covered/total bins:                                     4        132                      
    missing/total bins:                                   128        132                      
    % Hit:                                              3.03%        100                      
    Coverpoint cg_bus::c_data_to_DUT                    1.56%        100    Uncovered            
        covered/total bins:                                 1         64                      
        missing/total bins:                                63         64                      
        % Hit:                                          1.56%        100                      
        bin auto[0:67108863]                                3          1    Covered              
        bin auto[67108864:134217727]                        0          1    ZERO                 
        bin auto[134217728:201326591]                       0          1    ZERO                 
        bin auto[201326592:268435455]                       0          1    ZERO                 
        bin auto[268435456:335544319]                       0          1    ZERO                 
        bin auto[335544320:402653183]                       0          1    ZERO                 
        bin auto[402653184:469762047]                       0          1    ZERO                 
        bin auto[469762048:536870911]                       0          1    ZERO                 
        bin auto[536870912:603979775]                       0          1    ZERO                 
        bin auto[603979776:671088639]                       0          1    ZERO                 
        bin auto[671088640:738197503]                       0          1    ZERO                 
        bin auto[738197504:805306367]                       0          1    ZERO                 
        bin auto[805306368:872415231]                       0          1    ZERO                 
        bin auto[872415232:939524095]                       0          1    ZERO                 
        bin auto[939524096:1006632959]                      0          1    ZERO                 
        bin auto[1006632960:1073741823]                     0          1    ZERO                 
        bin auto[1073741824:1140850687]                     0          1    ZERO                 
        bin auto[1140850688:1207959551]                     0          1    ZERO                 
        bin auto[1207959552:1275068415]                     0          1    ZERO                 
        bin auto[1275068416:1342177279]                     0          1    ZERO                 
        bin auto[1342177280:1409286143]                     0          1    ZERO                 
        bin auto[1409286144:1476395007]                     0          1    ZERO                 
        bin auto[1476395008:1543503871]                     0          1    ZERO                 
        bin auto[1543503872:1610612735]                     0          1    ZERO                 
        bin auto[1610612736:1677721599]                     0          1    ZERO                 
        bin auto[1677721600:1744830463]                     0          1    ZERO                 
        bin auto[1744830464:1811939327]                     0          1    ZERO                 
        bin auto[1811939328:1879048191]                     0          1    ZERO                 
        bin auto[1879048192:1946157055]                     0          1    ZERO                 
        bin auto[1946157056:2013265919]                     0          1    ZERO                 
        bin auto[2013265920:2080374783]                     0          1    ZERO                 
        bin auto[2080374784:2147483647]                     0          1    ZERO                 
        bin auto[2147483648:2214592511]                     0          1    ZERO                 
        bin auto[2214592512:2281701375]                     0          1    ZERO                 
        bin auto[2281701376:2348810239]                     0          1    ZERO                 
        bin auto[2348810240:2415919103]                     0          1    ZERO                 
        bin auto[2415919104:2483027967]                     0          1    ZERO                 
        bin auto[2483027968:2550136831]                     0          1    ZERO                 
        bin auto[2550136832:2617245695]                     0          1    ZERO                 
        bin auto[2617245696:2684354559]                     0          1    ZERO                 
        bin auto[2684354560:2751463423]                     0          1    ZERO                 
        bin auto[2751463424:2818572287]                     0          1    ZERO                 
        bin auto[2818572288:2885681151]                     0          1    ZERO                 
        bin auto[2885681152:2952790015]                     0          1    ZERO                 
        bin auto[2952790016:3019898879]                     0          1    ZERO                 
        bin auto[3019898880:3087007743]                     0          1    ZERO                 
        bin auto[3087007744:3154116607]                     0          1    ZERO                 
        bin auto[3154116608:3221225471]                     0          1    ZERO                 
        bin auto[3221225472:3288334335]                     0          1    ZERO                 
        bin auto[3288334336:3355443199]                     0          1    ZERO                 
        bin auto[3355443200:3422552063]                     0          1    ZERO                 
        bin auto[3422552064:3489660927]                     0          1    ZERO                 
        bin auto[3489660928:3556769791]                     0          1    ZERO                 
        bin auto[3556769792:3623878655]                     0          1    ZERO                 
        bin auto[3623878656:3690987519]                     0          1    ZERO                 
        bin auto[3690987520:3758096383]                     0          1    ZERO                 
        bin auto[3758096384:3825205247]                     0          1    ZERO                 
        bin auto[3825205248:3892314111]                     0          1    ZERO                 
        bin auto[3892314112:3959422975]                     0          1    ZERO                 
        bin auto[3959422976:4026531839]                     0          1    ZERO                 
        bin auto[4026531840:4093640703]                     0          1    ZERO                 
        bin auto[4093640704:4160749567]                     0          1    ZERO                 
        bin auto[4160749568:4227858431]                     0          1    ZERO                 
        bin auto[4227858432:4294967295]                     0          1    ZERO                 
    Coverpoint cg_bus::c_data_from_DUT                  1.56%        100    Uncovered            
        covered/total bins:                                 1         64                      
        missing/total bins:                                63         64                      
        % Hit:                                          1.56%        100                      
        bin auto[0:67108863]                                3          1    Covered              
        bin auto[67108864:134217727]                        0          1    ZERO                 
        bin auto[134217728:201326591]                       0          1    ZERO                 
        bin auto[201326592:268435455]                       0          1    ZERO                 
        bin auto[268435456:335544319]                       0          1    ZERO                 
        bin auto[335544320:402653183]                       0          1    ZERO                 
        bin auto[402653184:469762047]                       0          1    ZERO                 
        bin auto[469762048:536870911]                       0          1    ZERO                 
        bin auto[536870912:603979775]                       0          1    ZERO                 
        bin auto[603979776:671088639]                       0          1    ZERO                 
        bin auto[671088640:738197503]                       0          1    ZERO                 
        bin auto[738197504:805306367]                       0          1    ZERO                 
        bin auto[805306368:872415231]                       0          1    ZERO                 
        bin auto[872415232:939524095]                       0          1    ZERO                 
        bin auto[939524096:1006632959]                      0          1    ZERO                 
        bin auto[1006632960:1073741823]                     0          1    ZERO                 
        bin auto[1073741824:1140850687]                     0          1    ZERO                 
        bin auto[1140850688:1207959551]                     0          1    ZERO                 
        bin auto[1207959552:1275068415]                     0          1    ZERO                 
        bin auto[1275068416:1342177279]                     0          1    ZERO                 
        bin auto[1342177280:1409286143]                     0          1    ZERO                 
        bin auto[1409286144:1476395007]                     0          1    ZERO                 
        bin auto[1476395008:1543503871]                     0          1    ZERO                 
        bin auto[1543503872:1610612735]                     0          1    ZERO                 
        bin auto[1610612736:1677721599]                     0          1    ZERO                 
        bin auto[1677721600:1744830463]                     0          1    ZERO                 
        bin auto[1744830464:1811939327]                     0          1    ZERO                 
        bin auto[1811939328:1879048191]                     0          1    ZERO                 
        bin auto[1879048192:1946157055]                     0          1    ZERO                 
        bin auto[1946157056:2013265919]                     0          1    ZERO                 
        bin auto[2013265920:2080374783]                     0          1    ZERO                 
        bin auto[2080374784:2147483647]                     0          1    ZERO                 
        bin auto[2147483648:2214592511]                     0          1    ZERO                 
        bin auto[2214592512:2281701375]                     0          1    ZERO                 
        bin auto[2281701376:2348810239]                     0          1    ZERO                 
        bin auto[2348810240:2415919103]                     0          1    ZERO                 
        bin auto[2415919104:2483027967]                     0          1    ZERO                 
        bin auto[2483027968:2550136831]                     0          1    ZERO                 
        bin auto[2550136832:2617245695]                     0          1    ZERO                 
        bin auto[2617245696:2684354559]                     0          1    ZERO                 
        bin auto[2684354560:2751463423]                     0          1    ZERO                 
        bin auto[2751463424:2818572287]                     0          1    ZERO                 
        bin auto[2818572288:2885681151]                     0          1    ZERO                 
        bin auto[2885681152:2952790015]                     0          1    ZERO                 
        bin auto[2952790016:3019898879]                     0          1    ZERO                 
        bin auto[3019898880:3087007743]                     0          1    ZERO                 
        bin auto[3087007744:3154116607]                     0          1    ZERO                 
        bin auto[3154116608:3221225471]                     0          1    ZERO                 
        bin auto[3221225472:3288334335]                     0          1    ZERO                 
        bin auto[3288334336:3355443199]                     0          1    ZERO                 
        bin auto[3355443200:3422552063]                     0          1    ZERO                 
        bin auto[3422552064:3489660927]                     0          1    ZERO                 
        bin auto[3489660928:3556769791]                     0          1    ZERO                 
        bin auto[3556769792:3623878655]                     0          1    ZERO                 
        bin auto[3623878656:3690987519]                     0          1    ZERO                 
        bin auto[3690987520:3758096383]                     0          1    ZERO                 
        bin auto[3758096384:3825205247]                     0          1    ZERO                 
        bin auto[3825205248:3892314111]                     0          1    ZERO                 
        bin auto[3892314112:3959422975]                     0          1    ZERO                 
        bin auto[3959422976:4026531839]                     0          1    ZERO                 
        bin auto[4026531840:4093640703]                     0          1    ZERO                 
        bin auto[4093640704:4160749567]                     0          1    ZERO                 
        bin auto[4160749568:4227858431]                     0          1    ZERO                 
        bin auto[4227858432:4294967295]                     0          1    ZERO                 
    Coverpoint cg_bus::c_data_empty                    50.00%        100    Uncovered            
        covered/total bins:                                 1          2                      
        missing/total bins:                                 1          2                      
        % Hit:                                         50.00%        100                      
        bin auto[0]                                         3          1    Covered              
        bin auto[1]                                         0          1    ZERO                 
    Coverpoint cg_bus::c_data_full                     50.00%        100    Uncovered            
        covered/total bins:                                 1          2                      
        missing/total bins:                                 1          2                      
        % Hit:                                         50.00%        100                      
        bin auto[0]                                         3          1    Covered              
        bin auto[1]                                         0          1    ZERO                 

TOTAL COVERGROUP COVERAGE: 25.78%  COVERGROUP TYPES: 1

Total Coverage By File (code coverage only, filtered view): 60.60%

End time: 11:23:37 on Feb 24,2022, Elapsed time: 0:00:00
Errors: 0, Warnings: 0
